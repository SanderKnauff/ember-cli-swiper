{"version":3,"file":"swiper-container.js","sourceRoot":"","sources":["swiper-container.ts"],"names":[],"mappings":"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","sourcesContent":["import Swiper from 'swiper';\nimport Component from '@glimmer/component';\nimport { getProperties } from '@ember/object';\nimport { once } from '@ember/runloop';\nimport { warn } from '@ember/debug';\nimport { NavigationOptions } from 'swiper/types/modules/navigation';\nimport { PaginationOptions } from 'swiper/types/modules/pagination';\n\ninterface Options {\n  navigation: boolean | NavigationOptions;\n  pagination: boolean | PaginationOptions;\n  vertical: boolean;\n  centered: boolean;\n  centeredSlides: boolean\n}\n\ninterface Arguments {\n  options: Options;\n  navigation: boolean;\n  pagination: boolean;\n}\n\nconst EMBER_CLI_SWIPER_OPTIONS = [\n  'options',\n  'registerAs',\n  'vertical',\n  'centered',\n  'updateFor',\n  'currentSlide'\n] as const;\n\nexport default class SwiperContainer extends Component<Arguments> {\n  /**\n   * Swiper Instance\n   */\n  private swiper?: Swiper;\n\n  /**\n   * Proxies `Swiper.activeIndex`\n   */\n  public currentSlide: number = 0;\n\n  /**\n   * Compared against `currentSlide`\n   */\n  private currentSlideInternal: number = 0;\n\n  /**\n   * User defined map of Swiper events\n   * @type {Object}\n   */\n  events: any = null;\n\n  /**\n   * Abstraction to invoke `Swiper.update`\n   */\n  public updateFor: string = '';\n\n  /**\n   * Compared against `updateFor`\n   */\n  private updateForInternal: string = '';\n\n  /**\n   * Render navigation controls\n   */\n  public get hasNavigation(): boolean {\n     return !!this.options?.navigation ?? this.args.navigation;\n  }\n\n  /**\n   * Swiper next element class\n   */\n  public nextElClass: string = 'swiper-button-next';\n\n  /**\n   * Swiper previous element class\n   */\n  public prevElClass: string = 'swiper-button-prev';\n\n  /**\n   * Render pagination controls\n   */\n  public get hasPagination(): boolean {\n    return !!this.args.options.pagination ?? this.args.pagination;\n  }\n\n  /**\n   * Single Attribute options\n   */\n  public options: Options | null  = null;\n\n  /**\n   * Get Swiper options from attributes\n   */\n  private getOptions() {\n    let attrs = getProperties(this,  [...Object.keys(this.attrs)]); // eslint-disable-line ember/no-attrs-in-components\n    let options = Object.assign({}, this.options, attrs);\n\n    // Overwrite pagination element selector\n    if (options.pagination) {\n      let customPaginationEl\n        = (typeof options.pagination === 'string' && options.pagination) // custom string selector\n        || (typeof options.pagination === 'object' && options.pagination.el) // custom `el` option selector\n        || '';\n\n      // Note:\n      //  Never resolve user provided pagination configuration,\n      //  which may not extend Object.prototype creating hard to\n      //  debug issues within Swiper.\n      options.pagination = Object.assign(\n        { clickable: customPaginationEl ? true : false }, // custom paginations must be clickable\n        typeof options.pagination === 'object' ? options.pagination : {},\n        {\n          el: customPaginationEl || `#${this.elementId} > .swiper-pagination`\n        }\n      );\n    }\n\n    if (options.navigation) {\n      if (typeof options.navigation !== 'object') {\n        options.navigation = {};\n      }\n\n      // Sync prev/next nav classes to custom options\n      if (typeof options.navigation.prevEl === 'string') {\n        this.prevElClass = options.navigation.prevEl.replace('.', '');\n      }\n\n      if (typeof options.navigation.nextEl === 'string') {\n        this.nextElClass = options.navigation.nextEl.replace('.', '');\n      }\n\n      // Ensure `nextEl` & `prevEl` required options set\n      // and that navigation inherits from Object.prototype\n      options.navigation = Object.assign({}, options.navigation, {\n        nextEl: `.${this.nextElClass}`,\n        prevEl: `.${this.prevElClass}`\n      });\n    }\n\n    if (options.vertical) {\n      warn(\n        'ember-cli-swiper option `direction` is ignored while `vertical` true',\n        !options.direction,\n        { id: 'ember-cli-swiper.direction-with-virtical' }\n      );\n\n      options.direction = 'vertical';\n    }\n\n    if (options.centered) {\n      warn(\n        'ember-cli-swiper option `centeredSlides` is ignored while `centered` true',\n        !options.centeredSlides,\n        { id: 'ember-cli-swiper.centered-with-centered-slides' }\n      );\n\n      options.centeredSlides = true;\n    }\n\n    // Allows `init` event to fire\n    if (this.events.init) {\n      options.init = false;\n    }\n\n    /*\n     Remove component-only\n     configuration options from Swiper options\n     */\n    Object.keys(options).forEach(\n      (k) => EMBER_CLI_SWIPER_OPTIONS.indexOf(k) !== -1 && delete options[k]\n    );\n\n    return options;\n  }\n\n  /**\n   * Userland fallback sugar for forcing swiper update\n   * @public\n   */\n  forceUpdate() {\n    this.swiper.update();\n    this.swiper.slideTo(this.currentSlide);\n  }\n\n  /**\n   * Update `currentSlide` and trigger `onChange` event\n   * @private\n   * @param {Object} swiper - Swiper instance\n   */\n  private slideChanged(swiper: Swiper) {\n    let index;\n\n    if (this.loop) {\n      index = parseInt(\n        swiper.slides\n          .parent()\n          .find('.swiper-slide-active')\n          .attr('data-swiper-slide-index'),\n        10\n      );\n    } else {\n      index = swiper.realIndex;\n    }\n\n    this.currentSlideInternal = index;\n    this.currentSlide = index;\n    this.onChange = swiper.slides[swiper.realIndex];\n  }\n\n  didUpdateAttrs() {\n    this._super(...arguments);\n\n    /*\n     Data-down Swiper slide activation\n     */\n    if (this.currentSlide !== this.currentSlideInternal) {\n      let index = this.currentSlide;\n\n      if (this.loop) {\n        let swiper = this.swiper;\n\n        index = swiper.slides\n          .parent()\n          .find(`[data-swiper-slide-index=\"${this.currentSlide}\"]`)\n          .prevAll().length;\n      }\n\n      this.swiper.slideTo(index);\n      this.currentSlideInternal = this.currentSlide;\n    }\n\n    /*\n     Trigger `update()` of swiper\n     */\n    if (this.updateFor !== this.updateForInternal) {\n      once(this.swiper.update);\n      this.updateForInternal = this.updateFor;\n    }\n  }\n\n  didInsertElement() {\n    this._super(...arguments);\n    this.registerAs = this;\n\n    let swiperOptions = Object.assign(\n      { initialSlide: this.currentSlide },\n      this.getOptions()\n    );\n\n    let transitionEvent = this.loop ? 'slideChangeTransitionEnd' : 'slideChange';\n    let instance = this.swiper = new Swiper(this.element, swiperOptions);\n    instance.on(\n      transitionEvent,\n      this.private slideChanged.bind(this, instance)\n    );\n\n    // Subscribe configured actions as Swiper events\n    Object.keys(this.events || {}).forEach((evt) =>\n      instance.on(evt, this.events[evt])\n    );\n\n    // Manual initalization when user requires `init` event handling\n    if (swiperOptions.init === false) {\n      instance.init();\n    }\n  }\n\n  willDestroyElement() {\n    this._super(...arguments);\n    let instance = this.swiper;\n\n    if (instance) {\n      instance.off('slideChangeTransitionEnd');\n      instance.destroy();\n      instance = this.swiper = null;\n    }\n  }\n\n  /**\n   * On Swiper Slide change\n   * @public\n   * @param {Swiper.Slide} swiperSlide\n   */\n  onChange(/* swiperSlide */) {}\n}\n"]}